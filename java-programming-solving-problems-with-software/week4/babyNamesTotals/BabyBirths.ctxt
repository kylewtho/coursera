#BlueJ class context
comment0.target=BabyBirths
comment1.params=
comment1.target=void\ printNames()
comment10.params=name\ gender
comment10.target=int\ yearOfHighestRank(java.lang.String,\ java.lang.String)
comment10.text=\n\ Write\ the\ method\ yearOfHighestRank\ that\ has\ two\ parameters\:\ a\ string\ name,\ and\ a\ \n\ string\ named\ gender\ (F\ for\ female\ and\ M\ for\ male).\ This\ method\ selects\ a\ range\ of\ \n\ files\ to\ process\ and\ returns\ an\ integer,\ the\ year\ with\ the\ highest\ rank\ for\ the\ \n\ name\ and\ gender.\ If\ the\ name\ and\ gender\ are\ not\ in\ any\ of\ the\ selected\ files,\ it\ \n\ should\ return\ -1.\ \n
comment11.params=
comment11.target=void\ testyearOfHighestRank()
comment12.params=name\ gender
comment12.target=double\ getAverageRank(java.lang.String,\ java.lang.String)
comment12.text=\n\ Write\ the\ method\ getAverageRank\ that\ has\ two\ parameters\:\ a\ string\ name,\ and\ a\ \n\ string\ named\ gender\ (F\ for\ female\ and\ M\ for\ male).\ This\ method\ selects\ a\ range\ of\ \n\ files\ to\ process\ and\ returns\ a\ double\ representing\ the\ average\ rank\ of\ the\ name\ and\ \n\ gender\ over\ the\ selected\ files.\ It\ should\ return\ -1.0\ if\ the\ name\ is\ not\ ranked\ in\ \n\ any\ of\ the\ selected\ files.\ \n
comment13.params=
comment13.target=void\ testGetAverageRank()
comment2.params=fr
comment2.target=void\ totalBirths(edu.duke.FileResource)
comment2.text=\n\ Modify\ the\ method\ totalBirths\ (shown\ in\ the\ video\ for\ this\ project)\ to\ also\ print\ the\ \n\ number\ of\ girls\ names\ ,\ the\ number\ of\ boys\ names\ and\ the\ total\ names\ in\ the\ file.\n
comment3.params=
comment3.target=void\ testTotalBirths()
comment4.params=year\ name\ gender
comment4.target=int\ getRank(int,\ java.lang.String,\ java.lang.String)
comment4.text=\n\ Write\ the\ method\ named\ getRank\ that\ has\ three\ parameters\:\ an\ integer\ named\ year,\ a\ \n\ string\ named\ name,\ and\ a\ string\ named\ gender\ (F\ for\ female\ and\ M\ for\ male).\ This\ method\ \n\ returns\ the\ rank\ of\ the\ name\ in\ the\ file\ for\ the\ given\ gender,\ \ where\ rank\ 1\ is\ the\ name\ \n\ with\ the\ largest\ number\ of\ births.\ If\ the\ name\ is\ not\ in\ the\ file,\ then\ -1\ is\ returned.\n
comment5.params=
comment5.target=void\ testGetRank()
comment6.params=year\ rank\ gender
comment6.target=java.lang.String\ getName(int,\ int,\ java.lang.String)
comment6.text=\n\ Write\ the\ method\ named\ getName\ that\ has\ three\ parameters\:\ an\ integer\ named\ year,\ an\ \n\ integer\ named\ rank,\ and\ a\ string\ named\ gender\ (F\ for\ female\ and\ M\ for\ male).\ This\ \n\ method\ returns\ the\ name\ of\ the\ person\ in\ the\ file\ at\ this\ rank,\ for\ the\ given\ gender,\ \n\ where\ rank\ 1\ is\ the\ name\ with\ the\ largest\ number\ of\ births.\ If\ the\ rank\ does\ not\ exist\ \n\ in\ the\ file,\ then\ \u201CNO\ NAME\u201D\ \ is\ returned.\n
comment7.params=
comment7.target=void\ testGetName()
comment8.params=name\ year\ newYear\ gender
comment8.target=void\ whatIsNameInYear(java.lang.String,\ int,\ int,\ java.lang.String)
comment8.text=\n\ Write\ the\ void\ method\ named\ whatIsNameInYear\ that\ has\ four\ parameters\:\ a\ string\ name,\ \n\ an\ integer\ named\ year\ representing\ the\ year\ that\ name\ was\ born,\ \ an\ integer\ named\ \n\ newYear\ and\ a\ string\ named\ gender\ (F\ for\ female\ and\ M\ for\ male).\ This\ method\ determines\ \n\ what\ name\ would\ have\ been\ named\ if\ they\ were\ born\ in\ a\ different\ year,\ based\ on\ the\ \n\ same\ popularity.\ \n
comment9.params=
comment9.target=void\ testWhatIsNameInYear()
numComments=14
